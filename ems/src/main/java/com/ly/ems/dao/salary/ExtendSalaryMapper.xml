<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ly.ems.dao.salary.ExtendSalaryMapper">
    <resultMap id="SalaryVoMap" type="com.ly.ems.model.salary.SalaryVo"
               extends="com.ly.ems.dao.salary.SalaryMapper.BaseResultMap">

        <result column="group_num" property="groupNum" jdbcType="VARCHAR"/>
        <result column="num_in_group" property="numInGroup" jdbcType="VARCHAR"/>
        <result column="employee_name" property="employeeName" jdbcType="VARCHAR"/>
        <result column="id_card" property="idCard" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="VARCHAR"/>
        <result column="job_id" property="jobId" jdbcType="INTEGER" />
        <result column="job_name" property="jobName" jdbcType="VARCHAR"/>
        <result column="group_id" property="groupId" jdbcType="INTEGER" />
        <result column="group_name" property="groupName" jdbcType="VARCHAR"/>
        <result column="project_id" property="projectId" jdbcType="INTEGER" />
        <result column="project_name" property="projectName" jdbcType="VARCHAR"/>
        <result column="company_id" property="companyId" jdbcType="INTEGER" />
        <result column="company_name" property="companyName" jdbcType="VARCHAR"/>
    </resultMap>


    <select id="getSalariesByConditions" resultMap="SalaryVoMap">
        SELECT (@numInGroup := case when @gid=g.id then @numInGroup + 1 else 1 end )  num_in_group,
                @gid:=g.id gid,
                s.*,
                e.employee_name, e.id_card, e.gender,
                j.id job_id, j.job_name,
                g.id group_id, g.group_name,
                p.id project_id, p.project_name,
                c.id company_id, c.company_name
        FROM ${salaryTableName} s
        INNER JOIN ly_employee e ON s.employee_id = e.id and e.enable = 1
        LEFT JOIN ly_job j ON e.job_id = j.id
        LEFT JOIN ly_group g ON e.group_id = g.id
        LEFT JOIN ly_dispatch_rel dr ON g.id = dr.group_id
        LEFT JOIN ly_project p ON p.id = dr.project_id
        LEFT JOIN ly_company c ON c.id = p.company_id,
        (SELECT  @numInGroup := 0, @gid := 0) AS numVar
        WHERE 1=1 AND s.enable = 1
        <if test="conditions.employeeName != null and conditions.employeeName != ''">
            AND e.employee_name like CONCAT('%', #{conditions.employeeName, jdbcType=VARCHAR}, '%')
        </if>
        <if test="conditions.groupId != null and conditions.groupId != ''">
            AND e.group_id = #{conditions.groupId, jdbcType=VARCHAR}
        </if>
        <if test="conditions.jobId != null and conditions.jobId != ''">
            AND e.job_id = #{conditions.jobId, jdbcType=VARCHAR}
        </if>
        order by gid, num_in_group
    </select>

    <select id="getSalarySummaryByConditions" resultMap="SalaryVoMap">
        SELECT  @groupNum:=@groupNum+1 group_num,
                sum(s.daily_salary) daily_salary,
                sum(s.social_security_allowance) social_security_allowance,
                sum(s.house_fund_allowance) house_fund_allowance,
                sum(s.hot_allowance) hot_allowance,
                sum(s.other_income) other_income,
                sum(s.payable_salary) payable_salary,
                sum(s.personal_social_security) personal_social_security,
                sum(s.personal_house_fund) personal_house_fund,
                sum(s.pay_taxes) pay_taxes,
                sum(s.other_deduction) other_deduction,
                sum(s.real_salary) real_salary,

                g.id group_id,
                (select inner_g.group_name from ly_group inner_g where inner_g.id = g.id) group_name
        FROM ${salaryTableName} s
        INNER JOIN ly_employee e ON s.employee_id = e.id and e.enable = 1
        LEFT JOIN ly_group g ON e.group_id = g.id
        LEFT JOIN ly_dispatch_rel dr ON g.id = dr.group_id
        LEFT JOIN ly_project p ON p.id = dr.project_id
        LEFT JOIN ly_company c ON c.id = p.company_id,
        (SELECT  @groupNum := 0) AS numVar

        WHERE s.enable = 1
        <if test="conditions.employeeName != null and conditions.employeeName != ''">
            AND e.employee_name like CONCAT('%', #{conditions.employeeName, jdbcType=VARCHAR}, '%')
        </if>
        <if test="conditions.groupId != null and conditions.groupId != ''">
            AND e.group_id = #{conditions.groupId, jdbcType=VARCHAR}
        </if>
        <if test="conditions.jobId != null and conditions.jobId != ''">
            AND e.job_id = #{conditions.jobId, jdbcType=VARCHAR}
        </if>
        GROUP BY g.id


    </select>

    <select id="isExistSalaryTable" parameterType="String" resultType="Integer">
        SELECT COUNT(1) FROM INFORMATION_SCHEMA.tables WHERE table_name = '${salaryTableName}'
    </select>

    <update id="createSalaryTable" parameterType="String">
        create table
        -- if not exists
        ${salaryTableName} like ly_salary_template
    </update>

    <update id="dropSalaryTable" parameterType="String">
        create table
        -- if not exists
        ${salaryTableName}
    </update>

    <insert id="batchInsert">
        INSERT INTO ${salaryTableName} (
        employee_id, enable, attendance_days, daily_salary, hot_allowance, social_security_allowance,
        house_fund_allowance, other_income, payable_salary, personal_social_security,
        personal_house_fund, other_deduction, pay_taxes, real_salary, company_social_security,
        company_house_fund
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            ( #{item.employeeId}, #{item.enable}, #{item.attendanceDays},
            #{item.dailySalary}, #{item.hotAllowance}, #{item.socialSecurityAllowance},
            #{item.houseFundAllowance}, #{item.otherIncome}, #{item.payableSalary}, #{item.personalSocialSecurity},
            #{item.personalHouseFund}, #{item.otherDeduction}, #{item.payTaxes}, #{item.realSalary},
            #{item.companySocialSecurity},#{item.companyHouseFund} )
        </foreach>
    </insert>


    <sql id="Update_Column_List">
        social_security_allowance, house_fund_allowance,
        hot_allowance, other_income, payable_salary, personal_social_security, personal_house_fund,
        pay_taxes, other_deduction, real_salary, company_social_security, company_house_fund,
        enable, create_date, update_date, update_user_id
    </sql>
    <update id="updateSalaryById">
        UPDATE ${salaryTableName}
        <set >
            social_security_allowance = #{salary.socialSecurityAllowance, jdbcType=DECIMAL},
            house_fund_allowance = #{salary.houseFundAllowance, jdbcType=DECIMAL},
            hot_allowance = #{salary.hotAllowance, jdbcType=DECIMAL},
            other_income = #{salary.otherIncome, jdbcType=DECIMAL},
            payable_salary = #{salary.payableSalary, jdbcType=DECIMAL},
            personal_social_security = #{salary.personalSocialSecurity, jdbcType=DECIMAL},
            personal_house_fund = #{salary.personalHouseFund, jdbcType=DECIMAL},
            pay_taxes = #{salary.payTaxes, jdbcType=DECIMAL},
            other_deduction = #{salary.otherDeduction, jdbcType=DECIMAL},
            real_salary = #{salary.realSalary, jdbcType=DECIMAL},
            company_social_security = #{salary.companySocialSecurity, jdbcType=DECIMAL},
            company_house_fund = #{salary.companyHouseFund, jdbcType=DECIMAL},
        </set>
        WHERE id = #{salary.id, jdbcType=INTEGER}
    </update>
</mapper>