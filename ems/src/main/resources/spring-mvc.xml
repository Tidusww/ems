<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 扫描controller -->
    <context:component-scan base-package="com.ly.ems.controller"/>

    <!-- 由于spring-mvc的-->
    <context:property-placeholder location="classpath*:*.properties" ignore-unresolvable="true"/>

    <!-- 自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter
          这两个beans在pring MVC中为@Controllers分发请求所必须的 -->
    <mvc:annotation-driven conversion-service="conversionService">
        <!-- 拓展参数解析，解决前端组件化传递的参数和需要的对象名不一致的一些问题 -->
        <!-- example 例如前端传递的参数名为gId 可以讲改参数映射到gradationId上，可以根据具体的业务字段去定义 -->
        <mvc:argument-resolvers>
            <bean class="com.ly.ems.core.springmvc.databinder.RenamingProcessor">
                <constructor-arg name="annotationNotRequired" value="true"/>
            </bean>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <!-- 处理前端传入的String, 转换为对应的Enum -->
    <bean id="conversionService"
          class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.ly.ems.core.springmvc.conversion.enumerate.CommonEnumConverterFactory" />
                <bean class="com.ly.ems.core.springmvc.conversion.date.DateConverterFactory" />
            </set>
        </property>
    </bean>

    <!-- 使用default-servelt处理静态资源请求 -->
    <mvc:default-servlet-handler/>

    <!-- 定义视图文件的前后缀 ，视图模式配置-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="102400000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 配置多种返回数据类型 begin -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 是否忽略accept header，默认是false，这里忽略浏览器要求 -->
        <property name="ignoreAcceptHeader" value="true"/>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html;charset=UTF-8"/>
        <property name="mediaTypes">
            <map>
                <entry key="shtml" value="text/html;charset=UTF-8"/>
                <entry key="xml" value="application/xml;charset=UTF-8"/>
                <entry key="json" value="application/json;charset=UTF-8"/>
            </map>
        </property>
    </bean>

    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash;配置登陆拦截器&ndash;&gt;-->
            <!--<mvc:mapping path="/**" />-->
            <!--<mvc:exclude-mapping path="/lib/**"/>-->
            <!--<mvc:exclude-mapping path="/static/**"/>-->
            <!--<bean class="com.zy.ossadmin.interceptor.LoginInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!--&lt;!&ndash;&lt;!&ndash; 启用shrio授权注解拦截方式 &ndash;&gt;-->
    <!--<aop:config proxy-target-class="true"></aop:config>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property content="securityManager" ref="securityManager"/>-->
    <!--</bean>&ndash;&gt;-->
</beans>
